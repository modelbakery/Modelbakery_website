---
title: Using python + R with Reticulate
author: Seung Hyun Sung
date: '2022-10-23'
slug: python
categories:
  - python
tags:
  - test
subtitle: ''
summary: ''
authors: []
lastmod: '2022-10-23T14:43:21+09:00'
featured: no
image:
  caption: ''
  focal_point: ''
  preview_only: no
projects: []
---

#### Purpose 

The most popular data science languages are Python and R. Data scientists that learn to use the strengths of both languages are becoming credentials. Understanding the strengths and weaknesses of these languages and by shaping our data science workflow will make us work productively. 

+ __EDA__, __Visualisation__, __Apps & Reporting__: Switch to R to use tidyverse, shiny and rmarkdown
+ __Machine Learning__: Switch to Python to leverage scikit learn and tensorflow

#### Reticulate Setup 

The __reticulate__ package lets you use Python and R together seamlessly in R code, in R Markdown documents, and in the RStudio IDE, and thus with HUGO blogdown here to upload on the webpage.

```{r setip, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  message = FALSE,
  warning = FALSE
)
```


```{r}
library(tidyverse)
library(reticulate)
```


The `use_condaenv` function expects an environment name, not the path to the python executable. 
이 곳으로 파이썬 환경을 설정한다.  

```{r}
miniconda_path()
# reticulate::conda_create()
reticulate::use_condaenv("r-reticulate", required = TRUE)
py_config()
```


#### Conda Installation


```{python}
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
```

```{python}
df=pd.DataFrame([[1, 2], [3, 4], [4, 3], [2, 3]])
fig = plt.figure(figsize=(14,8))
for i in df.columns:
    ax=plt.subplot(2,1,i+1)
    df[[i]].plot(ax=ax)
    print(i)

plt.show()

```

```{python}
from sklearn.ensemble import RandomForestClassifier
clf = RandomForestClassifier(random_state=0)

X = [[ 1,  2,  3],  # 2 samples, 3 features
     [11, 12, 13]]

y = [0, 1]  # classes of each sample

clf.fit(X, y)
```

```{python}
clf.predict(X)
```


```{python}
from sklearn.cluster import AffinityPropagation
from sklearn.datasets import make_blobs

# #############################################################################
# Generate sample data
centers = [[1, 1], [-1, -1], [1, -1]]
X, labels_true = make_blobs(n_samples=300, centers=centers, cluster_std=0.5,
                            random_state=0)

# Compute Affinity Propagation
af = AffinityPropagation(preference=-50).fit(X)
cluster_centers_indices = af.cluster_centers_indices_
labels = af.labels_

n_clusters_ = len(cluster_centers_indices)

# #############################################################################
# Plot result
import matplotlib.pyplot as plt
from itertools import cycle

plt.close('all')
plt.figure(1)
plt.clf()

colors = cycle('bgrcmykbgrcmykbgrcmykbgrcmyk')
for k, col in zip(range(n_clusters_), colors):
    class_members = labels == k
    cluster_center = X[cluster_centers_indices[k]]
    plt.plot(X[class_members, 0], X[class_members, 1], col + '.')
    plt.plot(cluster_center[0], cluster_center[1], 'o', markerfacecolor=col,
             markeredgecolor='k', markersize=14)
    for x in X[class_members]:
        plt.plot([cluster_center[0], x[0]], [cluster_center[1], x[1]], col)

plt.title('Estimated number of clusters: %d' % n_clusters_)
plt.show()
```




